from typing import Any, List, Callable
from talkingtomachines.generative.prompt import (
    generate_conversational_agent_system_message,
    generate_demographic_prompt,
)
from talkingtomachines.generative.llm import query_llm

DemographicInfo = dict[str, Any]


class SyntheticAgent:
    """A class for constructing the base synthetic agent.

    Args:
        experiment_id (str): The ID of the experiment.
        experiment_context (str): The context of the experiment.
        session_id (int): The ID of the session.
        demographic_info (DemographicInfo): The demographic information of the user.
        model_info (str): The information about the model used by the agent.
        demographic_prompt_generator (Callable[[DemographicInfo], str], optional):
            A function that generates a demographic prompt based on the demographic information.
            Defaults to generate_demographic_prompt.

    Attributes:
        experiment_id (str): The ID of the experiment.
        experiment_context (str): The context of the experiment.
        session_id (int): The ID of the session.
        demographic_info (DemographicInfo): The demographic information of the user.
        model_info (str): The information about the model used by the agent.
    """

    def __init__(
        self,
        experiment_id: str,
        experiment_context: str,
        session_id: int,
        demographic_info: DemographicInfo,
        model_info: str,
        demographic_prompt_generator: Callable[
            [DemographicInfo], str
        ] = generate_demographic_prompt,
    ):
        self.experiment_id = experiment_id
        self.experiment_context = experiment_context
        self.session_id = session_id
        self.demographic_info = demographic_prompt_generator(demographic_info)
        self.model_info = model_info

    def get_experiment_id(self) -> str:
        """Return the experiment ID of the synthetic agent.

        Returns:
            str: The experiment ID of the synthetic agent.
        """
        return self.experiment_id

    def get_experiment_context(self) -> str:
        """Return the experiment context of the synthetic agent.

        Returns:
            str: The experiment context of the synthetic agent.
        """
        return self.experiment_context

    def get_session_id(self) -> int:
        """Return the session ID of the experiment.

        Returns:
            int: The session ID of the experiment.
        """
        return self.session_id

    def get_demographic_info(self) -> str:
        """Return the demographic information of the synthetic agent.

        Returns:
            str: The demographic information of the synthetic agent
        """
        return self.demographic_info

    def get_model_info(self) -> str:
        """Return the model information of the synthetic agent.

        Returns:
            str: The model information of the synthetic agent
        """
        return self.model_info

    def respond(self) -> str:
        """Generate a response based on the synthetic agent's model.

        Returns:
            str: The response generated by the synthetic agent
        """
        try:
            return ""
        except Exception as e:
            # Log the exception
            print(f"Error during response generation in SyntheticAgent object: {e}")
            return None


class ConversationalSyntheticAgent(SyntheticAgent):
    """A synthetic agent that interacts with users in a conversational system. Inherits from the SyntheticAgent base class.

    Args:
        experiment_id (str): The ID of the experiment.
        experiment_context (str): The context of the experiment.
        session_id (int): The ID of the session.
        demographic_info (DemographicInfo): The demographic information of the user.
        role (str): The name of the role assigned to the agent.
        role_description (str): The description of the role assigned to the agent.
        model_info (str): The information about the model used by the agent.
        treatment (str): The treatment assigned to the session.
        demographic_prompt_generator (Callable[[DemographicInfo], str], optional):
            A function that generates a demographic prompt based on the demographic information.
            Defaults to generate_demographic_prompt.

    Attributes:
        role (str): The name of the role assigned to the agent.
        role_description (str): The description of the role assigned to the agent.
        treatment (str): The treatment assigned to the session.
        system_message (str): The system message generated for the conversation.
        message_history (List[dict]): The history of the conversation with the synthetic agent.
    """

    def __init__(
        self,
        experiment_id: str,
        experiment_context: str,
        session_id: int,
        demographic_info: DemographicInfo,
        role: str,
        role_description: str,
        model_info: str,
        treatment: str,
        demographic_prompt_generator: Callable[
            [DemographicInfo], str
        ] = generate_demographic_prompt,
    ):
        super().__init__(
            experiment_id,
            experiment_context,
            session_id,
            demographic_info,
            model_info,
            demographic_prompt_generator,
        )
        self.role = role
        self.role_description = role_description
        self.treatment = treatment
        self.system_message = generate_conversational_agent_system_message(
            experiment_context=self.experiment_context,
            treatment=self.treatment,
            role_description=self.role_description,
            demographic_info=self.demographic_info,
        )
        self.message_history = [
            {"role": "system", "content": self.system_message},
        ]

    def get_role(self) -> str:
        """Return the assigned role of the synthetic agent.

        Returns:
            str: The assigned role of the synthetic agent.
        """
        return self.role

    def get_role_description(self) -> str:
        """Return the description of the synthetic agent's role.

        Returns:
            str: The description of the synthetic agent's role.
        """
        return self.role_description

    def get_treatment(self) -> str:
        """Return the treatment assigned to the session.

        Returns:
            str: The treatment assigned to the session.
        """
        return self.treatment

    def get_system_message(self) -> str:
        """Return the system message of the synthetic agent.

        Returns:
            str: The system message of the synthetic agent.
        """
        return self.system_message

    def get_message_history(self) -> List[dict]:
        """Return the message history of the synthetic agent.

        Returns:
            List[dict]: The conversation history of the synthetic agent
        """
        return self.message_history

    def update_message_history(self, message: str, role: str) -> None:
        """Update the message history of the synthetic agent with a new message.

        Args:
            message (str): A message to add to the conversation history.
            role (str): The identifier of the party that generated the message.

        Returns:
            None
        """
        self.message_history.append({"role": role, "content": message})

    def respond(self, question: str) -> str:
        """Generate a response to a question posed to the synthetic agent.

        Args:
            question (str): A question or prompt to which the agent should respond.

        Returns:
            str: The response generated by the synthetic agent.
        """
        try:
            self.update_message_history(message=question, role="assistant")
            response = query_llm(
                model_info=self.model_info,
                message_history=self.message_history,
            )
            self.update_message_history(message=response, role="user")
            return response

        except Exception as e:
            # Log the exception
            print(
                f"Error during response generation by ConversationalSyntheticAgent object: {e}"
            )
            return ""

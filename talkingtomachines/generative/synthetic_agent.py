from typing import Any, List, Dict, Callable
from prompt import generate_conversational_system_message, generate_demographic_prompt

DemographicInfo = Dict[str, Any]


class SyntheticAgent:
    """
    A class representing a synthetic agent.

    Class Attributes:
        experiment_id (str): The ID of the experiment.
        experiment_context (str): The context of the experiment.
        demographic_info (DemographicInfo): The demographic information of the user.
        model_info (str): The information about the model used by the agent.
        demographic_prompt_generator (Callable[[DemographicInfo], str], optional):
            A function that generates a demographic prompt based on the demographic information.
            Defaults to generate_demographic_prompt.
    """

    def __init__(
        self,
        experiment_id: str,
        experiment_context: str,
        demographic_info: DemographicInfo,
        model_info: str,
        demographic_prompt_generator: Callable[
            [DemographicInfo], str
        ] = generate_demographic_prompt,
    ):
        self.experiment_id = experiment_id
        self.experiment_context = experiment_context
        self.demographic_info = demographic_prompt_generator(demographic_info)
        self.model_info = model_info

    def get_experiment_id(self) -> str:
        """
        Return the experiment ID of the synthetic agent.

        Returns:
            str: The experiment ID of the synthetic agent.
        """
        return self.experiment_id

    def get_experiment_context(self) -> str:
        """
        Return the experiment context of the synthetic agent.

        Returns:
            str: The experiment context of the synthetic agent.
        """
        return self.experiment_context

    def get_demographic_info(self) -> str:
        """
        Return the demographic information of the synthetic agent.

        Returns:
            str: The demographic information of the synthetic agent
        """
        return self.demographic_info

    def get_model_info(self) -> str:
        """
        Return the model information of the synthetic agent.

        Returns:
            str: The model information of the synthetic agent
        """
        return self.model_info

    def respond(self, question: str) -> str:
        """
        Generate a response based on the synthetic agent's model.

        Parameters:
            question (str): A question or prompt to which the agent should respond.

        Returns:
            str: The response generated by the synthetic agent
        """
        try:
            # Implement response generation based on model
            return ""
        except Exception as e:
            # Log the exception
            print(f"Error during response generation in SyntheticAgent object: {e}")
            return None


class ConversationalSyntheticAgent(SyntheticAgent):
    """
    A synthetic agent that interacts with users in a conversational system. Inherits from the
    SyntheticAgent base class.

    Base Attributes:
        experiment_id (str): The ID of the experiment.
        experiment_context (str): The context of the experiment.
        demographic_info (DemographicInfo): The demographic information of the user.
        model_info (str): The information about the model used by the agent.
        assigned_treatment (str): The assigned treatment for the user.
        demographic_prompt_generator (Callable[[DemographicInfo], str], optional):
            A function that generates a demographic prompt based on the demographic information.
            Defaults to generate_demographic_prompt.

    Class Attributes:
        assigned_treatment (str): The assigned treatment for the synthetic agent.
        conversation_history (list): The history of the conversation with the synthetic agent.
        system_message (str): The system message generated for the conversation.
    """

    def __init__(
        self,
        experiment_id: str,
        experiment_context: str,
        demographic_info: DemographicInfo,
        model_info: str,
        assigned_treatment: str,
        demographic_prompt_generator: Callable[
            [DemographicInfo], str
        ] = generate_demographic_prompt,
    ):
        super().__init__(
            experiment_id,
            experiment_context,
            demographic_info,
            model_info,
            demographic_prompt_generator,
        )
        self.assigned_treatment = assigned_treatment
        self.conversation_history = []
        self.system_message = generate_conversational_system_message(
            self.experiment_context, self.demographic_info, self.assigned_treatment
        )

    def get_assigned_treatment(self) -> str:
        """
        Return the assigned treatment of the synthetic agent.

        Returns:
            str: The assigned treatment of the synthetic agent
        """
        return self.assigned_treatment

    def get_system_message(self) -> str:
        """
        Return the system message of the synthetic agent.

        Returns:
            str: The system message of the synthetic agent
        """
        return self.system_message

    def get_conversation_history(self) -> List[str]:
        """
        Return the conversation history of the synthetic agent.

        Returns:
            List[str]: The conversation history of the synthetic agent
        """
        return self.conversation_history

    def add_to_conversation_history(self, message: str) -> None:
        """
        Add a message to the conversation history of the synthetic agent.

        Parameters:
            message (str): A message to add to the conversation history.

        Returns:
            None
        """
        self.conversation_history.append(message)

    def respond(self, question: str) -> str:
        """
        Generate a response to a question posed to the synthetic agent.

        Parameters:
            question (str): A question or prompt to which the agent should respond.

        Returns:
            str: The response generated by the synthetic agent
        """
        try:
            # Implement response generation based on model and conversation history
            pass
        except Exception as e:
            # Log the exception
            print(
                f"Error during response generation by ConversationalSyntheticAgent object: {e}"
            )
            return None

def generate_profile_prompt(profile_info: dict) -> str:
    """Formats the demographic profile information of a synthetic subject into a prompt.

    Args:
        profile_info (dict): A dictionary containing the demographic profile information of the synthetic subject.

    Returns:
        str: The formatted profile information as a prompt.
    """
    try:
        profile_prompt = "Your demographic profile:\n"
        counter = 1
        for question, response in profile_info.items():
            if question == "ID":
                continue
            profile_prompt += f"{counter}) Interviewer: {question} Me: {response} "
            counter += 1
        return profile_prompt

    except Exception as e:
        # Log the exception
        print(
            f"Error encountered when generating demographic profile prompt: {e}. Returning empty string."
        )
        return ""


def generate_conversational_agent_system_message(
    experiment_context: str,
    treatment: str,
    role_description: str,
    profile_prompt: str,
) -> str:
    """Constructs system message for conversational agents by combining experiment_context, treatment, profile_prompt, role description.

    Args:
        experiment_context (str): The context of the experiment.
        treatment (str): The treatment that is assigned to the session.
        role_description (str): A description of the agent's role.
        profile_prompt (str): The demographic profile information of the synthetic subject generated by the generate_profile_prompt function.

    Returns:
        str: The constructed conversational system message.
    """
    return (
        f"{experiment_context}\n\n{treatment}\n\n{profile_prompt}\n\n{role_description}"
    )


def generate_conversational_session_system_message(
    experiment_context: str, treatment: str
) -> str:
    """Constructs system message for conversational sessions by combining experiment_context and treatment.

    Args:
        experiment_context (str): The context of the experiment.
        treatment (str): The treatment that is assigned to the session.

    Returns:
        str: The constructed conversational system message.
    """
    return f"{experiment_context}\n\n{treatment}"
